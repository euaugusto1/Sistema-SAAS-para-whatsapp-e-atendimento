# Build stage
FROM --platform=linux/arm64 node:18-alpine AS builder

WORKDIR /app

# Copy root package files first
COPY package*.json ./

# Copy API package files
COPY apps/api/package*.json ./apps/api/

# Install ALL dependencies (including devDependencies for build)
RUN npm ci && npm cache clean --force

# Copy prisma schema
COPY apps/api/prisma ./apps/api/prisma

# Generate Prisma Client
WORKDIR /app/apps/api
RUN npx prisma generate

# Copy source code
WORKDIR /app
COPY apps/api/src ./apps/api/src
COPY apps/api/tsconfig*.json ./apps/api/

# Build TypeScript
WORKDIR /app/apps/api
RUN npm run build

# Production stage
FROM --platform=linux/arm64 node:18-alpine

# Install dumb-init for proper signal handling
RUN apk add --no-cache dumb-init openssl

# Create app user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nestjs -u 1001

WORKDIR /app

# Copy package files
COPY apps/api/package*.json ./

# Install only production dependencies
RUN npm ci --only=production && npm cache clean --force

# Copy Prisma schema and generated client
COPY --from=builder --chown=nestjs:nodejs /app/apps/api/prisma ./prisma
COPY --from=builder --chown=nestjs:nodejs /app/node_modules/.prisma ./node_modules/.prisma
COPY --from=builder --chown=nestjs:nodejs /app/node_modules/@prisma ./node_modules/@prisma

# Copy built application
COPY --from=builder --chown=nestjs:nodejs /app/apps/api/dist ./dist

# Switch to non-root user
USER nestjs

# Expose port
EXPOSE 3001

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=40s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3001/health', (r) => { process.exit(r.statusCode === 200 ? 0 : 1); })" || exit 1

# Start application with dumb-init
ENTRYPOINT ["dumb-init", "--"]
CMD ["node", "dist/main.js"]
